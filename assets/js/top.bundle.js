"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"===_typeof(t)&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s="./src/js/top.ts")}({"./src/js/_modules/todo.ts":function srcJs_modulesTodoTs(module,exports,__webpack_require__){eval("\r\n/**\r\n * Todo操作処理\r\n **/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.todo = void 0;\r\nfunction todo() {\r\n    //datetime-localの初期value値に現在時間追加\r\n    const timeInput = document.querySelector('.control__formInput02');\r\n    const now = new Date();\r\n    now.setMinutes(now.getMinutes() - now.getTimezoneOffset());\r\n    timeInput.value = now.toISOString().slice(0, -8);\r\n    // todo入力情報を入れる配列\r\n    let listItems = Array();\r\n    // tableへ挿入関数\r\n    const insertingTable = (todo, time, status) => {\r\n        // trにclass付与\r\n        let trClass = '';\r\n        if (status === '1') {\r\n            trClass = 'is-uncomplete';\r\n        }\r\n        else if (status === '2') {\r\n            trClass = 'is-process';\r\n        }\r\n        else if (status === '3') {\r\n            trClass = 'is-complete';\r\n        }\r\n        // selectにselected属性付与\r\n        let statusToSelected1 = status === '1' ? 'selected=\"selected\"' : '';\r\n        let statusToSelected2 = status === '2' ? 'selected=\"selected\"' : '';\r\n        let statusToSelected3 = status === '3' ? 'selected=\"selected\"' : '';\r\n        const insertHtml = `\n\t\t<tr class=\"table__row ${trClass}\" data-todoname=\"${todo}\">\n\t\t<td>${todo}</td>\n\t\t<td>${time}</td>\n\t\t<td>\n\t\t<select name=\"\" id=\"\" class=\"table__select\">\n\t\t<option value=\"1\" class=\"table__selectItem\" ${statusToSelected1}>未完</option>\n\t\t<option value=\"2\" class=\"table__selectItem\" ${statusToSelected2}>処理中</option>\n\t\t<option value=\"3\" class=\"table__selectItem\" ${statusToSelected3}>完了</option>\n\t\t</select>\n\t\t</td>\n\t\t<td>\n\t\t<button type=\"button\" class=\"table__delButton\">削除</button>\n\t\t</td>\n\t\t</tr>\n\t\t`;\r\n        const targetTbody = document.querySelector('.table__tbody');\r\n        if (targetTbody) {\r\n            targetTbody.insertAdjacentHTML('afterbegin', insertHtml);\r\n        }\r\n    };\r\n    // -- 新規追加 --\r\n    const addBtn = document.querySelector('.control__addButton');\r\n    addBtn.addEventListener('click', () => {\r\n        //入れる要素\r\n        const todoInput = document.querySelector('.control__formInput01');\r\n        const todoInputVal = todoInput.value;\r\n        const timeInputVal = timeInput.value;\r\n        // 2026-08-28T23:00 を2026/08/28 23:00の形式に変更\r\n        const replacedTimeInputVal01 = timeInputVal.replace(/-/g, '/');\r\n        const replacedTimeInputVal02 = replacedTimeInputVal01.replace(/T/g, ' ');\r\n        // 空なら終了\r\n        if (todoInputVal === '') {\r\n            window.alert('todo名を入力してください。');\r\n            return false;\r\n        }\r\n        // -- localStorageの準備 --\r\n        // まずはlocalStorageからデータ取得\r\n        const storageJson = localStorage.mykey;\r\n        if (storageJson === undefined) {\r\n            return false;\r\n        }\r\n        // 呼び出し時はオブジェクト形式に戻す\r\n        listItems = JSON.parse(storageJson);\r\n        //   入力情報をオブジェクトの配列に入れる\r\n        const item = {\r\n            todoVal: todoInputVal,\r\n            todoTime: replacedTimeInputVal02,\r\n            status: 1,\r\n            isDeleted: false\r\n        };\r\n        listItems.push(item);\r\n        //オブジェクトを復元できるように文字列(JSON)形式にする\r\n        const listItemsString = JSON.stringify(listItems);\r\n        // localStorageに保存、構文→localStorage.setItem(キー, データ)\r\n        localStorage.setItem('mykey', listItemsString);\r\n        insertingTable(todoInputVal, replacedTimeInputVal02, \"1\");\r\n    });\r\n    //ページ読込時に、localStorageからリスト呼び出し\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        const storageJson = localStorage.mykey;\r\n        if (storageJson === undefined) {\r\n            return false;\r\n        }\r\n        //呼び出し時は逆にオブジェクト形式に戻す\r\n        listItems = JSON.parse(storageJson);\r\n        listItems.forEach((item) => {\r\n            insertingTable(item.todoVal, item.todoTime, item.status);\r\n        });\r\n    });\r\n    // 状態の変更 (追加要素への処理時のため、親要素にイベント設定)\r\n    const tbody = document.querySelector('.table__tbody');\r\n    tbody.addEventListener('change', (e) => {\r\n        if (e.target.classList.contains('table__select')) {\r\n            const selectValue = e.target.value;\r\n            const parent = e.target.closest('.table__row');\r\n            //まず既存classは削除\r\n            if (parent.classList.contains('is-uncomplete') ||\r\n                parent.classList.contains('is-process') ||\r\n                parent.classList.contains('is-complete')) {\r\n                parent.classList.remove('is-uncomplete', 'is-process', 'is-complete');\r\n            }\r\n            if (selectValue === '1') {\r\n                parent.classList.add('is-uncomplete');\r\n            }\r\n            if (selectValue === '2') {\r\n                parent.classList.add('is-process');\r\n            }\r\n            if (selectValue === '3') {\r\n                parent.classList.add('is-complete');\r\n            }\r\n            // localStorageへも変更を保存\r\n            // btn data値\r\n            const trDataVal = parent.dataset['todoname'];\r\n            // todoごと（特定のkeyのみ）更新するにはデータ取り出してから更新\r\n            let storageJson = localStorage.mykey;\r\n            //呼び出し時はオブジェクト形式に戻す\r\n            let storageJsonObj = JSON.parse(storageJson);\r\n            if (storageJsonObj) {\r\n                //変更対象の要素のtodoVal値と一致させる\r\n                //メモ：find()は、提供されたテスト関数を満たす配列内の要素を返す\r\n                const changeValue = storageJsonObj.find((item) => item.todoVal === trDataVal);\r\n                //一致した削除対象のオブジェクトのstatusプロパティにvalue値(整数)を入れる\r\n                changeValue.status = selectValue;\r\n            }\r\n            // JSONに変換し直してローカルストレージに再設定\r\n            localStorage.setItem('mykey', JSON.stringify(storageJsonObj));\r\n        }\r\n    });\r\n    // 削除する (追加要素への処理時のため、親要素にイベント設定)\r\n    tbody.addEventListener('click', (e) => {\r\n        if (e.target.classList.contains('table__delButton')) {\r\n            const parent = e.target.closest('tr');\r\n            const todoName = parent.querySelector('td:first-of-type');\r\n            const todoNameValue = todoName.textContent;\r\n            const confirmDel = window.confirm(`「${todoNameValue}」を削除しますか？`);\r\n            //btn data値\r\n            const trDataVal = parent.dataset['todoname'];\r\n            if (confirmDel) {\r\n                parent.remove();\r\n                // todoごと（特定のkeyのみ）削除するにはデータ取り出してから削除\r\n                let storageJson = localStorage.mykey;\r\n                //呼び出し時はオブジェクト形式に戻す\r\n                let storageJsonObj = JSON.parse(storageJson);\r\n                if (storageJsonObj) {\r\n                    //削除対象の要素のtodoVal値と一致させる\r\n                    //メモ：find()は、提供されたテスト関数を満たす配列内の要素を返す\r\n                    const delValue = storageJsonObj.find((item) => item.todoVal === trDataVal);\r\n                    //一致した削除対象のオブジェクトのisDeletedプロパティにtrueを入れる\r\n                    delValue.isDeleted = true;\r\n                    //オブジェクトをfilter()で削除\r\n                    //メモ：filter()はオブジェクトのうちfalseのものを配列で返す\r\n                    const newStorageJsonObj = storageJsonObj.filter((item) => item.isDeleted === false);\r\n                    storageJsonObj = newStorageJsonObj;\r\n                    // JSONに変換し直してローカルストレージに再設定\r\n                    localStorage.setItem('mykey', JSON.stringify(storageJsonObj));\r\n                }\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n}\r\nexports.todo = todo;\r\n\n\n//# sourceURL=webpack:///./src/js/_modules/todo.ts?")},"./src/js/top.ts":function srcJsTopTs(module,exports,__webpack_require__){eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nconst todo_1 = __webpack_require__(/*! ./_modules/todo */ "./src/js/_modules/todo.ts");\r\n(0, todo_1.todo)();\r\n\n\n//# sourceURL=webpack:///./src/js/top.ts?')}});